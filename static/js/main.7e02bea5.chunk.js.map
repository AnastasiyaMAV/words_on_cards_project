{"version":3,"sources":["components/Header.jsx","components/ErrorServer.jsx","components/EditableTable.jsx","components/AddDelWord.jsx","components/CardWord.jsx","components/hooks/useTheme.jsx","components/Footer.jsx","components/NoMatchesFound.jsx","components/ApplicationConstructor.jsx","App.js","reportWebVitals.js","index.js","components/store/words.js"],"names":["Header","className","to","src","alt","title","ErrorServer","EditableCell","editing","dataIndex","children","inputType","record","index","restProps","Item","name","style","margin","rules","required","message","inject","observer","wordsStore","Form","useForm","form","useState","massWords","data","setData","editingKey","setEditingKey","useEffect","length","word","filter","editWord","id","update","isEditing","cancel","save","a","validateFields","row","newData","findIndex","item","splice","push","console","log","loadData","mergedColumns","width","editable","render","_","Link","onClick","marginRight","onConfirm","disabled","setFieldsValue","english","transcription","russian","edit","map","col","onCell","error","isLoading","tip","component","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","setEnglish","setTranscription","setRussian","delWord","setDelWord","invisibleAdd","setInvisibleAdd","invisibleDel","setInvisibleDel","okAdd","setOkAdd","hoverable","placeholder","e","target","value","addWord","removeWord","CardWord","props","pressed","setPressed","printCount","setPrintCount","ref","useRef","count","handleClickButtonCheck","event","type","setTimeout","throttle","idword","current","focus","localStorage","setItem","JSON","parse","getItem","removeItem","onMouseDown","onMouseUp","defaultTheme","window","matchMedia","matches","Footer","theme","setTheme","useLayoutEffect","document","documentElement","setAttribute","useTheme","NoMatchesFound","mass","setMass","setCount","countWord","newSet","Set","add","Array","from","clear","size","path","element","page","pageSize","renderItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","fetch","response","ok","json","Error","runInAction","method","headers","stringify","dataAdd","catch","remWord","mode","Modal","info","content","onOk","makeAutoObservable","this","ReactDOM","basename","process","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7e02bea5.chunk.js","sourcesContent":["import { Outlet, NavLink } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <ul className=\"header\">\r\n                <NavLink to=\"/\"><img src='./assets/images/logo.png' alt=\"logo\" className=\"logoImg\" \r\n                    title=\"Urheberschaft: https://www.flaticon.com/ru/\"/></NavLink>\r\n                <NavLink to=\"/\" className=\"notActivLink\" >Word table</NavLink>\r\n                <NavLink to=\"/addDelWord\" className=\"notActivLink\">Add or remove</NavLink>\r\n                <NavLink to=\"/game\" className=\"notActivLink\">Words on cards</NavLink>\r\n            </ul>\r\n            <Outlet />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","function ErrorServer() {\r\n  return (\r\n    <>\r\n    <div className=\"wrapperErrorServer\">\r\n        <img src='./assets/images/sadCat.png' alt=\"ErrorServer\" className=\"ErrorServerImg\" \r\n                  title=\"Urheberschaft: https://www.flaticon.com/ru/\"/>          \r\n        <div>Server Error</div>\r\n        <div>I'm sorry, please try again later...</div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ErrorServer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Table, Input, Popconfirm, Form, Typography, Spin } from 'antd';\r\nimport { observer, inject } from \"mobx-react\";\r\nimport ErrorServer from \"./ErrorServer\"\r\n\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{\r\n            margin: 0,\r\n          }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Please Input ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nfunction EditableTable({ wordsStore }) {\r\n  \r\n  const [form] = Form.useForm();\r\n  const [data, setData] = useState(wordsStore.massWords);\r\n  const [editingKey, setEditingKey] = useState('');\r\n\r\n  useEffect(() => {\r\n    if(wordsStore.massWords.length){\r\n      setData(wordsStore.massWords);  \r\n    }\r\n  }, [wordsStore.massWords]);\r\n\r\n  useEffect(() => {\r\n    let word = '';\r\n    data.filter(\r\n      (editWord) => {\r\n        if(editWord.id === editingKey) {\r\n          word = editWord;\r\n        }\r\n        return word;\r\n      }\r\n    );\r\n\r\n    if(editingKey){\r\n      wordsStore.update(editingKey, word);\r\n    };\r\n  }, [data]);\r\n\r\n  const isEditing = (record) => record.id === editingKey;\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      english: '',\r\n      transcription: '',\r\n      russian: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.id);\r\n    \r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (id) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      const newData = [...data];\r\n      const index = newData.findIndex((item) => id === item.id);\r\n\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        setData(newData);\r\n        setEditingKey('');\r\n      } else {\r\n        newData.push(row);\r\n        setData(newData);\r\n        setEditingKey('');\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Validate Failed:', errInfo);\r\n    }\r\n    wordsStore.loadData();// перерисовка таблицы после созданения\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'english',\r\n      dataIndex: 'english',\r\n      width: '25%',\r\n      editable: true,\r\n      className: 'EditableTable',\r\n    },\r\n    {\r\n      title: 'transcription',\r\n      dataIndex: 'transcription',\r\n      width: '25%',\r\n      editable: true,\r\n      className: 'EditableTable',\r\n    },\r\n    {\r\n      title: 'russian',\r\n      dataIndex: 'russian',\r\n      width: '20%',\r\n      editable: true,\r\n      className: 'EditableTable',\r\n    },\r\n    {\r\n      title: 'operation',\r\n      dataIndex: 'operation',\r\n      className: 'EditableTable',\r\n      render: (_, record) => {\r\n        const editable = isEditing(record);\r\n        return editable ? (\r\n          <span>\r\n            <Typography.Link\r\n              onClick={() => save(record.id)}\r\n              style={{\r\n                marginRight: 8,\r\n              }}\r\n            >\r\n              Save\r\n            </Typography.Link>\r\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n              <Typography.Link>Cancel</Typography.Link>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n            Edit\r\n          </Typography.Link>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n  \r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n\r\n  if(wordsStore.error) return <ErrorServer />;\r\n  if(wordsStore.isLoading) return <Spin tip=\"Loading...\" className=\"spinLoading\"/>\r\n\r\n  return (\r\n    <div className='containerTable'>\r\n      <Form form={form} component={false}>\r\n        <Table\r\n          components={{\r\n            body: {\r\n              cell: EditableCell,\r\n            },\r\n          }}\r\n          bordered\r\n          dataSource={data}\r\n          columns={mergedColumns}\r\n          rowClassName=\"editable-row \"\r\n          pagination={{\r\n            onChange: cancel,\r\n          }}\r\n        />\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default inject([\"wordsStore\"])(observer(EditableTable));","import { Card, Input, Button } from 'antd';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nfunction AddDelWord({ wordsStore }) {\r\n  const [english, setEnglish] = useState('');\r\n  const [transcription, setTranscription] = useState('');\r\n  const [russian, setRussian] = useState('');\r\n  const [delWord, setDelWord] = useState('');\r\n\r\n  const [data, setData] = useState({\r\n    english: '',\r\n    transcription: '',\r\n    russian: '',\r\n  });\r\n\r\n  const [invisibleAdd, setInvisibleAdd] = useState(true);\r\n  const [invisibleDel, setInvisibleDel] = useState(true);\r\n  const [okAdd, setOkAdd] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if(english && transcription && russian) {\r\n      setInvisibleAdd(false);\r\n    } else {\r\n      setInvisibleAdd(true);\r\n    }\r\n    if(!delWord) {\r\n      setInvisibleDel(true);\r\n    }\r\n  }, [english, transcription, russian, delWord]);\r\n\r\n  const handleChangeEnglish = (e) => {\r\n    setEnglish(e.target.value);\r\n    setData({...data, [e.target.name]: e.target.value});\r\n    setOkAdd(false);\r\n  };\r\n\r\n  const handleChangeTranscription = (e) => {\r\n    setTranscription(e.target.value);\r\n    setData({...data, [e.target.name]: e.target.value});\r\n    setOkAdd(false);\r\n  };\r\n\r\n  const handleChangeRussian = (e) => {\r\n    setRussian(e.target.value);\r\n    setData({...data, [e.target.name]: e.target.value});\r\n    setOkAdd(false);\r\n  };\r\n\r\n  const onClAdd = () => {\r\n    if (!data) return;\r\n    wordsStore.addWord(data);\r\n    setEnglish('');\r\n    setTranscription('');\r\n    setRussian('');  \r\n    setOkAdd(true);\r\n  }\r\n\r\n  const handleChangeDel = (e) => {\r\n    setDelWord(e.target.value);\r\n    setInvisibleDel(false);\r\n  };\r\n\r\n  const onClRemove = () => {\r\n    if (!delWord) return;\r\n    wordsStore.removeWord(delWord);    \r\n    setDelWord('');\r\n  }\r\n\r\n  return(\r\n    <>\r\n    <div className='containerAddDel'>\r\n      <Card hoverable className='cardAdd'>            \r\n        <div>Please, enter the word you want to add to the table:</div>\r\n\r\n        <Input placeholder=\"english\" name=\"english\"\r\n          onChange={handleChangeEnglish} value={english}/>\r\n        <Input placeholder=\"transcription\" name=\"transcription\"\r\n          onChange={handleChangeTranscription} value={transcription}/>\r\n        <Input placeholder=\"russian\" name=\"russian\"\r\n          onChange={handleChangeRussian} value={russian}/>\r\n\r\n        <div className={\r\n          okAdd ? 'addOkVisible' : 'addOkInvisible'\r\n        }\r\n        >Word in the table! Congratulations!</div>\r\n\r\n        <Button disabled={invisibleAdd} onClick={onClAdd}>Add</Button>\r\n      </Card>\r\n\r\n      <Card hoverable className='cardDel'>            \r\n        <div>If you want to delete a word, then enter it below (in English format):</div>\r\n\r\n        <Input placeholder=\"english\" name=\"delWord\"\r\n          onChange={handleChangeDel} value={delWord} className=\"delInput\"/>\r\n\r\n        <Button disabled={invisibleDel} onClick={onClRemove}>Del</Button>\r\n      </Card>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\nexport default inject([\"wordsStore\"])(observer(AddDelWord));","import { Card, Button } from 'antd';\r\nimport { Content } from 'antd/lib/layout/layout';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport throttle from 'lodash/throttle';\r\n\r\nfunction CardWord(props) {\r\n    const [pressed, setPressed] = useState(false);\r\n    const [printCount, setPrintCount] = useState(0);\r\n    const ref = useRef(null);\r\n    const {count, ...data} = props; //всё кроме count\r\n\r\n    const handleClickButtonCheck = (event) => {\r\n        if (event.type === \"mousedown\") {\r\n            setPressed(!pressed);            \r\n        } else {\r\n            setTimeout(throttle(() => setPressed(!pressed), 1000), 1000);\r\n            setPrintCount(props.count(props.idword));\r\n        }\r\n    };\r\n    \r\n    const handleClickButtonGame = () => {\r\n        if(localStorage.getItem('printCount') != null){\r\n            localStorage.removeItem('printCount');\r\n            setPrintCount(props.count(0));\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        ref.current.focus();\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(printCount){\r\n            localStorage.setItem('printCount', printCount);\r\n        }\r\n    },[printCount]);\r\n\r\n    return(\r\n        <Content className='contentCard'>\r\n            <div className=\"circles\" title=\"Urheberschaft: https://github.com/scriptype\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <span></span>\r\n            </div>\r\n\r\n            <Card hoverable className='card'>\r\n                <div className='game'>\r\n                    <p className='gameCount'>Выучено слов: \r\n                    {\r\n                        JSON.parse(localStorage.getItem('printCount'))\r\n                        ? JSON.parse(localStorage.getItem('printCount'))\r\n                        : '0'\r\n                    }\r\n                    </p>\r\n                    <Button onClick={handleClickButtonGame}>start over</Button>\r\n                </div>\r\n\r\n                <hr/>\r\n                <h1 className='cardEnglishWord'>{props.english}</h1>\r\n                <h2 className='cardTranscription'>{props.transcription}</h2>\r\n                                \r\n                <hr/>\r\n                <Button {...data} className='cardButton' ref={ref} \r\n                    onMouseDown={handleClickButtonCheck} onMouseUp={handleClickButtonCheck}>\r\n                    {\r\n                        pressed ? \"Translation\" : \"Check\"\r\n                    }\r\n                </Button>\r\n                <h1 \r\n                    className={\r\n                        pressed ? 'cardRussianhWordReverse' : 'cardRussianhWordInitial'\r\n                    }>{props.russian}</h1>\r\n            </Card>\r\n        </Content>\r\n    );\r\n}\r\nexport default CardWord;","import { useLayoutEffect, useState } from \"react\";\r\n\r\nconst isDarkTheme = window?.matchMedia('(prefers-color-scheme: dark)').matches\r\nconst defaultTheme = isDarkTheme ? 'dark' : 'light';\r\n\r\nexport const useTheme = () => {\r\n    const[theme, setTheme] =  useState(localStorage.getItem('theme') || defaultTheme);\r\n\r\n    useLayoutEffect(() => {\r\n        document.documentElement.setAttribute('data-theme', theme);\r\n        localStorage.setItem('theme', theme)\r\n    }, [theme])\r\n\r\n    return {theme, setTheme}\r\n}","import { Button } from \"antd\";\r\nimport { useTheme } from \"./hooks/useTheme\";\r\n\r\nfunction Footer() {\r\n    const { theme, setTheme } = useTheme();\r\n\r\n    const handleLight = () => {\r\n        setTheme('light');\r\n        console.log(theme);\r\n    }\r\n\r\n    const handleDark = () => {\r\n        setTheme('dark');\r\n        console.log(theme);\r\n    }\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"btnTheme\">\r\n                <Button onClick={handleLight}>Light</Button>\r\n                <Button onClick={handleDark}>Dark</Button>\r\n            </div>\r\n\r\n            <div className=\"inscription\">\r\n                <img src='./assets/images/copyright.png' alt=\"copyright\" className=\"copyrightImg\" \r\n                    title=\"Urheberschaft: https://www.flaticon.com/ru/\" />\r\n                <span>Anastasiya Vostrikova</span>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","function NoMatchesFound() {\r\n    return (\r\n      <>\r\n      <div className=\"wrapper\">\r\n          <div className=\"typing-demo\" title=\"Urheberschaft: https://github.com/markodenic\">\r\n            OOps!! 404 NotFound!!!\r\n          </div>\r\n      </div>\r\n      </>\r\n    );\r\n}\r\n  \r\nexport default NoMatchesFound;","import { useState, useEffect } from 'react';\r\nimport { List } from 'antd';\r\nimport { observer, inject } from \"mobx-react\";\r\nimport { BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\r\nimport Header from './Header';\r\nimport EditableTable from './EditableTable';\r\nimport AddDelWord from './AddDelWord';\r\nimport CardWord from './CardWord';\r\nimport Footer from './Footer';\r\nimport NoMatchesFound from './NoMatchesFound';\r\n\r\nfunction ApplicationConstructor({ wordsStore }) {\r\n  const [mass, setMass] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    wordsStore.loadData();\r\n  }, []);\r\n  \r\n  const countWord = (id) => {\r\n    const newSet = new Set(mass);\r\n    if(id !== 0){\r\n      setCount(count+1);      \r\n      newSet.add(id);\r\n      setMass(Array.from(newSet));\r\n    } else {\r\n      newSet.clear();\r\n      setCount(0);\r\n      setMass([]);\r\n    }\r\n    return newSet.size;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"containerApp\">\r\n      <Router>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Header />}>\r\n\r\n            <Route index element={<EditableTable />} />\r\n            \r\n            <Route path=\"addDelWord\" element={<AddDelWord />} />      \r\n\r\n            <Route path=\"game\" element={\r\n              <List\r\n                pagination={{\r\n                  onChange: \r\n                  page => {\r\n                    console.log(page);\r\n                  },\r\n                  pageSize: 1,\r\n                }}\r\n                dataSource={wordsStore.massWords}\r\n                renderItem={item => (\r\n                  <List.Item className='listItemStyle'>\r\n                    {                      \r\n                      <CardWord key={item.id} idword={item.id} english={item.english} \r\n                        transcription={item.transcription} \r\n                        russian={item.russian} count={countWord} />\r\n                    }\r\n                  </List.Item>\r\n                )}\r\n              className='list'/>    \r\n            }/>\r\n\r\n            <Route path=\"*\" element={<NoMatchesFound />} />\r\n\r\n          </Route>\r\n        </Routes>\r\n      </Router>\r\n          \r\n      <Footer>Footer</Footer>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default inject([\"wordsStore\"])(observer(ApplicationConstructor));","import \"antd/dist/antd.css\";\r\nimport \"./App.css\";\r\nimport \"./components/styles/MainStyle.scss\";\r\nimport ApplicationConstructor from \"./components/ApplicationConstructor\";\r\n\r\nfunction App() {  \r\n  return <ApplicationConstructor />;\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from \"mobx-react\";\r\nimport WordsStore from \"./components/store/words\";\r\n\r\nconst store = {\r\n  wordsStore: new WordsStore(),\r\n};\r\nReactDOM.render(\r\n  <HashRouter basename={process.env.PUBLIC_URL}>\r\n    <React.StrictMode>\r\n      <Provider {... store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { Modal } from 'antd';\r\n\r\nexport default class WordsStore {\r\n    massWords = [];\r\n    isLoading = false;\r\n    error = false;\r\n  \r\n    constructor() {\r\n      makeAutoObservable(this);\r\n    }\r\n\r\n    loadData = async () => {\r\n      if(this.isLoading) {\r\n        return;\r\n      }\r\n      this.isLoading = true;\r\n  \r\n      const data = await fetch(\"/api/words\")\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          } else {\r\n            throw new Error(\"Something went wrong ...\");\r\n          }\r\n        });\r\n  \r\n      runInAction(() => {\r\n        this.massWords = data;\r\n        this.isLoading = false;\r\n      });\r\n    };\r\n\r\n    update = async (editingKey, word) => { \r\n      const data = await fetch(`/api/words/${editingKey}/update`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(word),\r\n      })\r\n        .then(response => {\r\n          if (response.ok) {\r\n            this.loadData();\r\n          } else {\r\n            throw new Error(\"Something went wrong ...\");\r\n          }\r\n        });\r\n\r\n    };\r\n\r\n    addWord = (dataAdd) => {\r\n      fetch(`/api/words/add`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(dataAdd),\r\n      })\r\n        .then(data => {\r\n          console.log(data);\r\n          this.loadData();\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });    \r\n    }\r\n\r\n    removeWord = (delWord) => {\r\n      let word = '';\r\n      this.massWords.filter(\r\n        (remWord) => {\r\n          if(remWord.english === delWord) {\r\n            word = remWord;\r\n            return word;\r\n          } else {\r\n            return null;\r\n          }        \r\n        }\r\n      );\r\n      if(word){\r\n        fetch(`/api/words/${word.id}/delete `, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json;charset=utf-8\",\r\n          },\r\n          body: JSON.stringify(word),\r\n          mode: \"cors\",\r\n        })\r\n          .then(response => {\r\n            if (response.ok) {\r\n              return response.json();\r\n            } else {\r\n              throw new Error(\"Something went wrong ...\");\r\n            }\r\n          })\r\n          .then(data => {\r\n            console.log(data);\r\n            this.loadData();\r\n            Modal.info({\r\n              title: delWord,\r\n              content: (\r\n                <div>\r\n                  <p>The word has been removed from the table! Congratulations!</p>\r\n                </div>\r\n              ),\r\n              onOk() {},\r\n            })\r\n          })\r\n          .catch(error => {\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        Modal.info({\r\n          title: delWord,\r\n          content: (\r\n            <div>\r\n              <p>There is no such word in the database!</p>\r\n            </div>\r\n          ),\r\n          onOk() {},\r\n        });        \r\n      }\r\n    } \r\n}"],"sourceRoot":""}